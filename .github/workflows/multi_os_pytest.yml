name: Multi OS Pytest Workflow

on:
  pull_request:
    branches:
      - master # or main or any other branch you want this to run on

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install bash (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install bash -y

    - name: Install bash (macOS)
      if: matrix.os == 'macOS-latest'
      run: brew install bash

    - name: Install bash (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install git || choco install git.install
      
    - name: Install Tools (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: bash -c "sudo apt-get update && sudo apt-get install img2pdf tesseract-ocr ghostscript -y"

    - name: Install Tools (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
           bash -c "brew update && brew install img2pdf tesseract ghostscript python@3.9"
           echo "Creating a symbolic link from python to python3..."
           sudo ln -s /usr/local/bin/python3 /usr/local/bin/python

    - name: Install Tools (Windows)
      if: matrix.os == 'windows-latest'
      run: bash -c "choco install img2pdf tesseract ghostscript -y"

    - name: Set up Python virtual environment
      run: |
        python -m pip install --upgrade pip
        python -m venv venv
        . venv/bin/activate # On Windows, you might need to change this to: venv\Scripts\Activate

    - name: Install requirements
      run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run pytest
      run: |
          pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=. ./test | tee pytest-coverage.txt
      id: pytest_results
      continue-on-error: true

    - name: Pytest coverage comment
      uses: MishaKav/pytest-coverage-comment@main
      with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
    
    - name: Create comment
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const xml = fs.readFileSync('pytest.xml', 'utf8');
          const testcaseMatches = xml.match(/<testcase[^>]*>/g) || [];
          let table = "| Class Name | Test Name | Time |\n";
          table += "|------------|-----------|------|\n";
          testcaseMatches.forEach(testcase => {
          const classnameMatch = testcase.match(/classname="([^"]*)"/);
          const nameMatch = testcase.match(/name="([^"]*)"/);
          const timeMatch = testcase.match(/time="([^"]*)"/);
          const classname = classnameMatch ? classnameMatch[1] : '';
          const name = nameMatch ? nameMatch[1] : '';
          const time = timeMatch ? timeMatch[1] : '';
          table += `| ${classname} | ${name} | ${time} |\n`; });
          const commentBody = `
              ## Pytest Results:
              ${table}
            `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });
        github-token: ${{ secrets.MY_GITHUB_TOKEN }}

